#include <stdio.h>

struct Student {
    int number;           // Öğrenci numarası
    char name[20];        // Öğrenci adı
    char surname[20];     // Öğrenci soyadı
    char department[50];  // Öğrenci bölümü
};

// Dosya oluşturma (İlk 100 öğrenci kaydını sıfırlama)
void createFile() {
    FILE *file = fopen("students.txt", "rb+");  // Okuma ve yazma için aç
    if (file == NULL) { 
        file = fopen("students.txt", "wb");    // Dosya yoksa oluştur
        if (file == NULL) {
            printf("File could not be opened.\n");
            return;
        }
    }
    struct Student student = {0, "", "", ""};  // Boş öğrenci yapısı
    for (int i = 0; i < 100; i++) {
        fwrite(&student, sizeof(struct Student), 1, file);  // 100 öğrenci kaydını sıfırla
    }
    printf("File created successfully.\n");
    fclose(file);  // Dosyayı kapat
}

// Öğrenci ekleme
void addStudent() {
    FILE *file = fopen("students.txt", "rb+");  // Okuma ve yazma için aç
    if (file == NULL) {
        printf("File could not be opened.\n");
        return;
    }

    struct Student student;
    printf("Enter student number (1-100): ");
    int stuNum;
    scanf("%d", &stuNum);
    if (stuNum < 1 || stuNum > 100) {
        printf("Invalid number.\n");
        fclose(file);
        return;
    }

    // Öğrenci kaydına doğrudan erişim sağla
    fseek(file, (stuNum - 1) * sizeof(struct Student), SEEK_SET);  // Belirli öğrenci numarasına git
    fread(&student, sizeof(struct Student), 1, file);  // Öğrenci kaydını oku

    if (student.number != 0) {  // Eğer öğrenci zaten varsa
        printf("Student already exists.\n");
        fclose(file);
        return;
    }

    // Öğrenci bilgilerini al
    printf("Enter student name: ");
    scanf("%s", student.name);
    printf("Enter student surname: ");
    scanf("%s", student.surname);
    printf("Enter student department: ");
    scanf("%s", student.department);
    student.number = stuNum;

    // Öğrencinin verilerini dosyaya yaz
    fseek(file, (stuNum - 1) * sizeof(struct Student), SEEK_SET);  // Belirli öğrenci kaydına git
    fwrite(&student, sizeof(struct Student), 1, file);  // Öğrenciyi yaz

    fclose(file);
    printf("Student data written to file successfully\n");
}

// Öğrenci bulma
void findStudent() {
    FILE *file = fopen("students.txt", "rb");  // Dosyayı okuma için aç
    if (file == NULL) {
        printf("File could not be opened.\n");
        return;
    }

    struct Student student;
    printf("Enter student number to find (1-100): ");
    int stuNum;
    scanf("%d", &stuNum);

    if (stuNum < 1 || stuNum > 100) {
        printf("Invalid number.\n");
        fclose(file);
        return;
    }

    // Öğrenci kaydına doğrudan erişim sağla
    fseek(file, (stuNum - 1) * sizeof(struct Student), SEEK_SET);  // Öğrenciye git
    fread(&student, sizeof(struct Student), 1, file);  // Öğrenciyi oku

    if (student.number == 0) {  // Öğrenci bulunamadı
        printf("Student not found.\n");
    } else {  // Öğrenci bulundu
        printf("%d, %s, %s, %s\n", student.number, student.name, student.surname, student.department);
    }

    fclose(file);
}

// Ana fonksiyon
int main(void) {
    int choice;

    while (1) {
        // Kullanıcıya seçenekler sun
        printf("\n1. Create new file\n2. Add new student\n3. Find students\n4. Exit\n");
        scanf("%d", &choice);

        // Kullanıcı seçimlerine göre işlemler
        switch (choice) {
        case 1:
            createFile();
            break;
        case 2:
            addStudent();
            break;
        case 3:
            findStudent();
            break;
        case 4:
            printf("Exiting program...\n");
            return 0;
        default:
            printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}
